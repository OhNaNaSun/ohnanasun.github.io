{"version":3,"sources":["components/PageHeader.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","PageHeader","classes","className","AppBar","position","Toolbar","to","Typography","color","Button","key","stdTypingDelay","avgTypingDelay","cursor","show","role","aria-label","Delay","ms","EditPage","React","lazy","QuestionPage","Home","App","createTheme","typography","fontSize","overrides","MuiCssBaseline","body","backgroundColor","fontFamily","a","fontWeight","lineHeight","MuiSvgIcon","palette","type","primary","main","text","secondary","background","paper","ThemeProvider","CssBaseline","Paper","fallback","path","exact","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TASMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLD,SAAU,OA0BCE,EAvBc,WAC3B,IAAMC,EAAUP,IAChB,OACE,yBAAKQ,UAAWD,EAAQJ,MACtB,kBAACM,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,YAAYJ,UAAWD,EAAQF,OACtC,kBAACQ,EAAA,EAAD,CAAYC,MAAM,eAAlB,cAEF,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAQC,IAAK,EAAGC,eAAgB,GAAIC,eAAgB,GAAIC,OAAQ,CAAEC,MAAM,IAAxE,WACW,IACT,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,gBAGA,kBAAC,IAAOC,MAAR,CAAcC,GAAI,Y,wBCtB1BC,G,MAAWC,IAAMC,MAAK,kBAAM,+DAE5BC,EAAeF,IAAMC,MAAK,kBAAM,8DAEhCE,EAAOH,IAAMC,MAAK,kBAAM,iCAyEfG,EAvEO,WACpB,IAAM5B,EAAQ6B,YAAY,CACxBC,WAAY,CACVC,SAAU,IAEZC,UAAW,CACTC,eAAgB,CACd,UAAW,CACTC,KAAM,CACJC,gBAAiB,WAEnB,IAAK,CACHC,WACE,yGAEJC,EAAG,CACDzB,MAAO,oBACP0B,WAAY,IACZC,WAAY,UAIlBC,WAAY,CACVvC,KAAM,CACJ8B,SAAU,YAIhBU,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAM,WAGRC,KAAM,CAAEF,QAAS,WACjBG,UAAW,CACTF,KAAM,WAERG,WAAY,CACVC,MAAO,cAIb,OACE,kBAACC,EAAA,EAAD,CAAejD,MAAOA,GACpB,kBAACkD,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,sBACV,kBAAC9B,EAAD,OAEF,kBAAC,IAAD,CAAO8B,KAAK,YAAYC,OAAK,GAC3B,kBAACC,EAAA,EAAD,KACE,kBAAC7B,EAAD,QAGJ,kBAAC,IAAD,CAAO2B,KAAK,IAAIC,OAAK,GACnB,kBAACC,EAAA,EAAD,KACE,kBAAC5B,EAAD,cCjEE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b150772.chunk.js","sourcesContent":["import React from 'react'\nimport Typist from 'react-typist'\nimport { Link } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n}))\nconst PageHeader: React.FC = () => {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Link to=\"/question\" className={classes.title}>\n            <Typography color=\"textPrimary\">Questions</Typography>\n          </Link>\n          <Button>\n            <Typist key={1} stdTypingDelay={10} avgTypingDelay={40} cursor={{ show: false }}>\n              have fun{' '}\n              <span role=\"img\" aria-label=\"lala\">\n                ❤️\n              </span>\n              <Typist.Delay ms={500} />\n            </Typist>\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\nexport default PageHeader\n","import React, { Suspense } from 'react'\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles'\n\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport PageHeader from 'components/PageHeader'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Paper from '@material-ui/core/Paper'\nimport './css/markdown-body.css'\n\nconst EditPage = React.lazy(() => import('./pages/EditPage'))\n\nconst QuestionPage = React.lazy(() => import('./pages/Question'))\n\nconst Home = React.lazy(() => import('./pages/Home'))\n\nconst App: React.FC = () => {\n  const theme = createTheme({\n    typography: {\n      fontSize: 17,\n    },\n    overrides: {\n      MuiCssBaseline: {\n        '@global': {\n          body: {\n            backgroundColor: '#272c34',\n          },\n          '*': {\n            fontFamily:\n              '-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji',\n          },\n          a: {\n            color: 'rgb(83, 155, 245)',\n            fontWeight: 600,\n            lineHeight: '21px',\n          },\n        },\n      },\n      MuiSvgIcon: {\n        root: {\n          fontSize: '1.3rem',\n        },\n      },\n    },\n    palette: {\n      type: 'dark',\n      primary: {\n        main: '#212121',\n        // main: '#272c34',\n      },\n      text: { primary: '#adbac7' },\n      secondary: {\n        main: '#90caf9',\n      },\n      background: {\n        paper: '#272c34',\n      },\n    },\n  })\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Paper>\n        <Router>\n          <PageHeader />\n          <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n              <Route path=\"/:category/:fileId\">\n                <EditPage />\n              </Route>\n              <Route path=\"/question\" exact>\n                <Container>\n                  <QuestionPage />\n                </Container>\n              </Route>\n              <Route path=\"/\" exact>\n                <Container>\n                  <Home />\n                </Container>\n              </Route>\n            </Switch>\n          </Suspense>\n        </Router>\n      </Paper>\n    </ThemeProvider>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}