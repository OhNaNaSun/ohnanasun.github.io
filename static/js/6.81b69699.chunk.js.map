{"version":3,"sources":["components/ShowdownConverter.ts","components/MarkdownEditor.tsx","components/DocOperationBox.tsx","pages/EditPage.tsx"],"names":["Showdown","type","filter","text","converter","options","replaceRecursiveRegExp","wholeMatch","match","left","right","replace","htmlunencode","highlightjs","highlightAuto","value","ShowdownConverter","tables","simplifiedAutoLink","strikethrough","tasklists","extensions","StyledContainer","styled","div","Titlebar","props","titleName","fullscreen","name","className","onClick","Editor","update","handleMaximize","visible","id","onChange","Previewer","dangerouslySetInnerHTML","__html","makeHtml","MarkdownEditor","mdContent","returnMdContent","useState","setText","editorMaximized","previewerMaximized","useEffect","val","target","e","maximize","useStyles","makeStyles","theme","titleBox","display","flexWrap","marginBottom","spacing","button","marginLeft","textField","width","DocOperationBox","docTitle","fileId","category","setMessage","classes","history","useHistory","title","setTitle","postNewFile","a","status","fetch","process","method","headers","body","JSON","stringify","content","uploadFileResponse","statusText","json","resData","push","Box","color","TextField","fullWidth","required","placeholder","InputLabelProps","shrink","Button","variant","root","flexGrow","editor","margin","marginTop","menuButton","marginRight","EditPage","useParams","setMdContent","setDocTitle","message","fetchContentRes","getDocContent","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","severity"],"mappings":"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","file":"static/js/6.81b69699.chunk.js","sourcesContent":["import 'highlight.js/styles/vs2015.css'\n\n// https://codepen.io/KrissSteindals/pen/yrBdQe?editors=0110\nimport * as Showdown from 'showdown'\nimport highlightjs from 'highlight.js'\n\nShowdown.extension('codehighlight', function () {\n  function htmlunencode(text: string) {\n    return text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>')\n  }\n  return [\n    {\n      type: 'output',\n      filter(text, converter, options) {\n        // use new shodown's regexp engine to conditionally parse codeblocks\n        const left = '<pre><code\\\\b[^>]*>'\n        const right = '</code></pre>'\n        const flags = 'g'\n        const replacement = function (wholeMatch: string, match: string, left: string, right: string) {\n          // unescape match to prevent double escaping\n          match = htmlunencode(match)\n          return left + highlightjs.highlightAuto(match).value + right\n        }\n        return Showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags)\n      },\n    },\n  ]\n})\nconst ShowdownConverter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true,\n  extensions: ['codehighlight'],\n})\nexport default ShowdownConverter\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport ShowdownConverter from 'components/ShowdownConverter'\n\nconst $bg = '#2d333b'\nconst $titlebarBg = '#212121'\nconst $text = '#bdbdbd'\nconst StyledContainer = styled.div`\n  * {\n    box-sizing: border-box;\n  }\n\n  .container {\n    max-width: 2000px;\n    margin: 0 auto;\n    display: flex;\n    flex-wrap: wrap;\n    box-shadow: 0px 0px 25px 1px rgba(0, 0, 0, 0.75);\n    border: 1px solid #616161;\n    border-radius: 5px;\n    overflow: hidden;\n  }\n\n  .window {\n    min-width: 360px;\n    min-height: 95vh;\n    background-color: #fff;\n    flex-grow: 1;\n    flex-basis: 0;\n    overflow: hidden;\n  }\n\n  .titlebar {\n    padding: 1rem 2rem;\n    padding-right: 1rem;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: ${$titlebarBg};\n    color: #616161;\n    text-transform: uppercase;\n    h3 {\n      margin: 0;\n      font-size: 1.1rem;\n    }\n\n    button {\n      display: block;\n      padding: 0;\n      width: 12px;\n      height: 12px;\n      font-size: 0.8rem;\n      border-radius: 50%;\n      background-color: #616161;\n      color: #616161;\n      border: none;\n      outline: none;\n      cursor: pointer;\n      &:hover {\n        background-color: #95c623;\n        color: #424242;\n      }\n    }\n  }\n\n  .editor-wrapper {\n    height: 100%;\n  }\n\n  #editor {\n    width: 100%;\n    height: 100%;\n    padding: 1rem 2rem;\n    padding-bottom: 5rem;\n    outline: none;\n    border: none;\n    border-radius: 0;\n    resize: vertical;\n    font-size: 1.1rem;\n    line-height: 1.5rem;\n    color: #fafafa;\n    background-color: ${$bg};\n  }\n\n  #preview {\n    padding: 1rem 2rem;\n    font-size: 1.1rem;\n    line-height: 1.5rem;\n    padding-bottom: 3rem;\n    background-color: ${$bg};\n    height: 100%;\n  }\n`\ninterface MdEditorProps {\n  mdContent?: string\n  returnMdContent: (arg0: string) => void\n}\nconst MarkdownEditor: React.FC<MdEditorProps> = ({ mdContent, returnMdContent }) => {\n  const [text, setText] = useState('')\n  const [editorMaximized, setEditorMaximized] = useState(false)\n  const [previewerMaximized, setPreviewerMaximized] = useState(false)\n  const onChange = (e: { target: { value: any } }): void => {\n    const { value } = e.target\n    setText(value)\n  }\n  useEffect(() => {\n    typeof mdContent === 'string' && setText(mdContent)\n  }, [mdContent])\n  useEffect(() => {\n    returnMdContent(text)\n  }, [returnMdContent, text])\n  const handleMaximize = (val: { target: { name: any } }): void => {\n    const { name } = val.target\n    // const value = this.state[name]\n    // this.setState({ [name]: !value })\n    // setEditorMaximized(!value)\n  }\n\n  return (\n    <StyledContainer>\n      <div className=\"container\">\n        <Editor\n          text={text}\n          update={onChange}\n          maximize={editorMaximized}\n          handleMaximize={handleMaximize}\n          visible={previewerMaximized}\n        />\n        <Previewer\n          text={text}\n          maximize={previewerMaximized}\n          handleMaximize={handleMaximize}\n          visible={editorMaximized}\n        />\n      </div>\n    </StyledContainer>\n  )\n}\n\nfunction Titlebar(props: { titleName: any; fullscreen: any; name: any }) {\n  const { titleName, fullscreen, name } = props\n\n  return (\n    <div className=\"titlebar\">\n      <h3>{titleName}</h3>\n      <div className=\"rounded\">\n        <button type=\"button\" onClick={fullscreen} name={name} />\n      </div>\n    </div>\n  )\n}\n\nfunction Editor(props: { text: any; update: any; handleMaximize: any; visible: any; maximize: any }) {\n  const { text, update, handleMaximize, visible } = props\n\n  if (visible) {\n    return null\n  }\n  return (\n    <div className=\"window\">\n      <Titlebar titleName=\"Editor\" fullscreen={handleMaximize} name=\"editorMaximized\" />\n      <div className=\"editor-wrapper\">\n        <textarea name=\"textarea\" id=\"editor\" value={text} onChange={update} />\n      </div>\n    </div>\n  )\n}\n\nfunction Previewer(props: { text: any; handleMaximize: any; visible: any; maximize: any }) {\n  const { text, handleMaximize, visible } = props\n  if (visible) {\n    return null\n  }\n\n  return (\n    <div className=\"window\">\n      <Titlebar titleName=\"Previewer\" fullscreen={handleMaximize} name=\"previewerMaximized\" />\n      <div\n        id=\"preview\"\n        className=\"markdown-body\"\n        dangerouslySetInnerHTML={{ __html: ShowdownConverter.makeHtml(text) }}\n      />\n    </div>\n  )\n}\n\nexport default MarkdownEditor\n","import Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\n\nimport { useHistory } from 'react-router-dom'\nimport React, { useState, Dispatch, SetStateAction, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  titleBox: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginBottom: theme.spacing(2),\n  },\n  button: {\n    marginLeft: theme.spacing(1),\n  },\n  textField: {\n    width: '80%',\n  },\n}))\ninterface DocOperationBoxProps {\n  fileId: string\n  docTitle: string\n  category: string\n  setMessage: Dispatch<SetStateAction<{ status: 'error' | 'success'; text: string } | null>>\n  mdContent: string\n}\nconst DocOperationBox: React.FC<DocOperationBoxProps> = ({ docTitle, fileId, category, setMessage, mdContent }) => {\n  const classes = useStyles()\n  const history = useHistory()\n  const [title, setTitle] = useState('')\n  useEffect(() => {\n    setTitle(docTitle)\n  }, [docTitle])\n  const postNewFile = async (): Promise<void> => {\n    if (!title) {\n      setMessage({ status: 'error', text: 'title is required' })\n      return\n    }\n    const uploadFileResponse = await fetch(\n      `${process.env.REACT_APP_API_URL}/documents/${category}${fileId === 'add' ? '' : `/${fileId}`}`,\n      {\n        method: fileId === 'add' ? 'POST' : 'PATCH',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify({\n          title,\n          content: mdContent,\n        }),\n      }\n    )\n    const { statusText } = uploadFileResponse\n    const resData = await uploadFileResponse.json()\n    setMessage({ status: 'success', text: statusText })\n    history.push(`./${resData.id}`)\n  }\n  return (\n    <Box color=\"text.primary\" className={classes.titleBox}>\n      <TextField\n        id=\"titleField\"\n        className={classes.textField}\n        color=\"secondary\"\n        fullWidth\n        required\n        onChange={(e): void => {\n          setTitle(e.target.value)\n        }}\n        placeholder=\"Title\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        value={title}\n      />\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        onClick={(): void => {\n          postNewFile()\n        }}\n      >\n        Save\n      </Button>\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        onClick={(): void => {\n          history.push(`/question#${category}`)\n        }}\n      >\n        Back\n      </Button>\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        onClick={(): void => {\n          history.push(`/${category}/add`)\n        }}\n      >\n        Add\n      </Button>\n    </Box>\n  )\n}\nexport default DocOperationBox\n","import React, { useState, useEffect } from 'react'\nimport MarkdownEditor from 'components/MarkdownEditor'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useParams } from 'react-router-dom'\nimport Alert from '@material-ui/lab/Alert'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport DocOperationBox from '../components/DocOperationBox'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  editor: {\n    width: '90%',\n    margin: '0 auto',\n    marginTop: theme.spacing(5),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '80%',\n  },\n}))\nconst EditPage: React.FC = () => {\n  const classes = useStyles()\n  const { category, fileId } = useParams()\n  const [mdContent, setMdContent] = useState('')\n  const [docTitle, setDocTitle] = useState('')\n  const [message, setMessage] = useState<{ text: string; status: 'success' | 'error' } | null>(null)\n  const handleClose = (): void => {\n    setMessage(null)\n  }\n  useEffect(() => {\n    if (fileId === 'add') {\n      setDocTitle('')\n      setMdContent('')\n    }\n  }, [fileId])\n  useEffect(() => {\n    const getDocContent = async (): Promise<void> => {\n      const fetchContentRes = await fetch(`${process.env.REACT_APP_API_URL}/documents/${category}/${fileId}`)\n      const { statusText } = fetchContentRes\n      const resData = await fetchContentRes.json()\n      setDocTitle(resData.title)\n      setMdContent(resData.content)\n    }\n    fileId !== 'add' && getDocContent()\n  }, [category, fileId])\n  return (\n    <div className={classes.editor}>\n      <DocOperationBox\n        fileId={fileId}\n        docTitle={docTitle}\n        category={category}\n        setMessage={setMessage}\n        mdContent={mdContent}\n      />\n      <MarkdownEditor mdContent={mdContent} returnMdContent={setMdContent} />\n      <Snackbar\n        open={!!message}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        autoHideDuration={6000}\n        onClose={handleClose}\n      >\n        <Alert severity={message?.status}>{message?.text}</Alert>\n      </Snackbar>\n    </div>\n  )\n}\nexport default EditPage\n"],"sourceRoot":""}